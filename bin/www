#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server');
var debug = require('debug')('bagelBoat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
** Socket.io
*/

var io = require('socket.io').listen(server);
var Room = require('../app/room.js');
var uuid = require('node-uuid');
var usernames = {};
var rooms = ['Lobby'];

io.sockets.on('connection', function(socket){
    socket.on('adduser', function(username) {
          socket.username = username;
          socket.room = 'Lobby';
          usernames[username] = username;
          socket.join('Lobby');
          socket.emit('updatechat', 'SERVER', 'you have connected to Lobby');
          socket.broadcast.to('Lobby').emit('updatechat', 'SERVER', username + ' has connected to this room');
          socket.emit('updaterooms', rooms, 'Lobby');

          console.log('DEBUG - a new user is connected in the Lobby room: ', username);
      });

      socket.on('create', function(room) {
          rooms.push(room);
          socket.emit('updaterooms', rooms, socket.room);
      });

      socket.on('sendchat', function(data) {
          console.log('DEBUG - ',socket.username, ' in room : ',socket.room, ' - send message : ', data);
          io.sockets["in"](socket.room).emit('updatechat', socket.username, data);
      });

      socket.on('switchRoom', function(newroom) {
          console.log('DEBUG - ',socket.username, ' - Change to the room : ', newroom);

          var oldroom;
          oldroom = socket.room;
          socket.leave(socket.room);
          socket.join(newroom);
          socket.emit('updatechat', 'SERVER', 'you have connected to ' + newroom);
          socket.broadcast.to(oldroom).emit('updatechat', 'SERVER', socket.username + ' has left this room');
          socket.room = newroom;
          socket.broadcast.to(newroom).emit('updatechat', 'SERVER', socket.username + ' has joined this room');
          socket.emit('updaterooms', rooms, newroom);
      });

      socket.on('disconnect', function() {
          console.log('DEBUG - ', socket.username, 'has been disconnected.')

          delete usernames[socket.username];
          io.sockets.emit('updateusers', usernames);
          socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');
          socket.leave(socket.room);
      });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function(){
    console.log('Express server listening on %d', port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
